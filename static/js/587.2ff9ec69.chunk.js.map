{"version":3,"file":"static/js/587.2ff9ec69.chunk.js","mappings":"8NAEaA,EAAe,SAACC,GAC3BC,QAAQC,IAAI,aAMZ,MAFuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,MA+BtDC,EAAc,SAACC,GAC1B,QAAIA,EAAeC,QAAU,IAItBD,EAAeE,OAAM,SAACC,EAAGC,GAAJ,OAC1BA,GAASJ,EAAeC,OAAS,GAAKE,EAAIH,EAAeI,EAAQ,KAAOJ,EAAeI,EAAQ,OAInG,UApCkB,WAChB,OAAsBC,EAAAA,EAAAA,YAAtB,eAAOT,EAAP,KAAYU,EAAZ,KACA,GAAgCD,EAAAA,EAAAA,YAAhC,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAAkDH,EAAAA,EAAAA,YAAlD,eAAOI,EAAP,KAA0BC,EAA1B,KACMC,EAAaJ,EAEnB,OACE,2BACGA,GAAW,SAACI,EAAD,CAAYC,OAAO,KAAU,yBAEzC,0FAEA,kBAAOC,IAAI,kBAAX,sBACA,kBAAOC,SAAU,SAAAC,GAAC,OAAIT,EAAOS,EAAEC,cAAcC,QAAQC,KAAK,SAASC,GAAG,kBAAkBC,KAAK,qBAC7F,mBAAQC,QAAS,WACf,IAAMC,EAAS3B,EAAaC,GAE5Bc,EAAqBY,GAErBd,EAAYT,EAAYuB,IAAUC,EAAAA,EAAAA,OAAK,kBAAM,gCAAsC,OALrF,oBAOA,8BAAId,QAAJ,IAAIA,OAAJ,EAAIA,EAAmBe,KAAK","sources":["puzzles/fibonacci/index.js"],"sourcesContent":["import React, { lazy, useState } from 'react'\n\nexport const genFibonacci = (len) => {\n  console.log('fibonacci')\n\n  // write your answer here:\n\n  const fibonacciArray = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n\n  return fibonacciArray\n}\n\nconst Fibonacci = () => {\n  const [len, setLen] = useState()\n  const [confetti, setConfetti] = useState()\n  const [fibonacciSequence, setFibonacciSequence] = useState()\n  const Confettila = confetti\n\n  return (\n    <div>\n      {confetti ? <Confettila start={true}/> : <></>}\n\n      <p>Given a number, we print a Fibonacci sequence of that number </p>\n\n      <label for=\"fibonacciLength\">Length:</label>\n      <input onChange={e => setLen(e.currentTarget.value)} type=\"number\" id=\"fibonacciLength\" name=\"fibonacciLength\" />\n      <button onClick={() => {\n        const result = genFibonacci(len)\n        \n        setFibonacciSequence(result)\n\n        setConfetti(isFibonacci(result) ? lazy(() => import('../../component/Confetti')) : null)\n      }}>Print</button>\n      <p>{fibonacciSequence?.join(',')}</p>\n    </div>\n  )\n}\n\nexport const isFibonacci = (fibonacciArray) => {\n  if (fibonacciArray.length <= 2) {\n    return false\n  }\n\n  return fibonacciArray.every((f, index) =>\n    index >= fibonacciArray.length - 2 || f + fibonacciArray[index + 1] === fibonacciArray[index + 2]\n  )\n}\n\nexport default Fibonacci"],"names":["genFibonacci","len","console","log","isFibonacci","fibonacciArray","length","every","f","index","useState","setLen","confetti","setConfetti","fibonacciSequence","setFibonacciSequence","Confettila","start","for","onChange","e","currentTarget","value","type","id","name","onClick","result","lazy","join"],"sourceRoot":""}