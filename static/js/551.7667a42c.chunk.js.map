{"version":3,"file":"static/js/551.7667a42c.chunk.js","mappings":"4NAGe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAEA,ECJa,SAAuBH,EAAOE,GAC3C,OAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,WAAS,GAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA0BR,EAAAA,EAAAA,UAAS,IAAnC,eAAOS,EAAP,KAAcC,EAAd,KACA,GAA8BV,EAAAA,EAAAA,WAAS,GAAvC,eAAOW,EAAP,KAAgBC,EAAhB,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACRH,EAAS,MACR,CAACT,KAEJY,EAAAA,EAAAA,YAAU,WAGR,IAAIC,EAgBJ,OAlBAR,GAAW,GACXE,GAAS,GAETO,IAAM,CACJC,OAAQ,MACRC,IAAK,qCACLC,OAAQ,CAAEC,EAAGlB,EAAOmB,KAAMjB,GAC1BkB,YAAa,IAAIN,IAAAA,cAAkB,SAAAO,GAAC,OAAIR,EAASQ,OAChDC,MAAK,SAAAC,GACNd,GAAS,SAAAe,GACP,OAAO,OAAI,IAAIC,IAAJ,kBAAYD,IAAZ,OAA0BD,EAAIG,KAAKC,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBAEhEnB,EAAWY,EAAIG,KAAKC,KAAKI,OAAS,GAClC1B,GAAW,MACV2B,OAAM,SAAAC,GACHnB,IAAAA,SAAemB,IACnB1B,GAAS,MAEJ,kBAAMM,OACZ,CAACb,EAAOE,IAEJ,CAAEE,QAAAA,EAASE,MAAAA,EAAOE,MAAAA,EAAOE,QAAAA,GDvB5BwB,CAAclC,EAAOE,GAJvBM,EADF,EACEA,MACAE,EAFF,EAEEA,QACAN,EAHF,EAGEA,QACAE,EAJF,EAIEA,MAGI6B,GAAWC,EAAAA,EAAAA,UACXC,GAAqBC,EAAAA,EAAAA,cAAY,SAAAC,GACjCnC,IACA+B,EAASK,SAASL,EAASK,QAAQC,aACvCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACtCA,EAAQ,GAAGC,gBAAkBlC,GAC/BP,GAAc,SAAA0C,GAAc,OAAIA,EAAiB,QAGjDN,GAAMJ,EAASK,QAAQM,QAAQP,MAClC,CAACnC,EAASM,IAOb,OACE,iCACE,kBAAOqC,KAAK,OAAOC,MAAOhD,EAAOiD,SAPrC,SAAsBhB,GACpBhC,EAASgC,EAAEiB,OAAOF,OAClB7C,EAAc,MAMXK,EAAMoB,KAAI,SAACuB,EAAMC,GAChB,OAAI5C,EAAMuB,SAAWqB,EAAQ,GACpB,gBAAKC,IAAKhB,EAAV,SAA0Cc,GAAPA,IAEnC,yBAAiBA,GAAPA,OAGrB,yBAAM/C,GAAW,gBACjB,yBAAME,GAAS","sources":["puzzles/infiniteScroll/index.js","puzzles/infiniteScroll/useBookSearch.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport useBookSearch from './useBookSearch'\n\nexport default function InfiniteScroll() {\n  const [query, setQuery] = useState('')\n  const [pageNumber, setPageNumber] = useState(1)\n\n  const {\n    books,\n    hasMore,\n    loading,\n    error\n  } = useBookSearch(query, pageNumber)\n\n  const observer = useRef()\n  const lastBookElementRef = useCallback(node => {\n    if (loading) return\n    if (observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1)\n      }\n    })\n    if (node) observer.current.observe(node)\n  }, [loading, hasMore])\n\n  function handleSearch(e) {\n    setQuery(e.target.value)\n    setPageNumber(1)\n  }\n\n  return (\n    <>\n      <input type=\"text\" value={query} onChange={handleSearch}></input>\n      {books.map((book, index) => {\n        if (books.length === index + 1) {\n          return <div ref={lastBookElementRef} key={book}>{book}</div>\n        } else {\n          return <div key={book}>{book}</div>\n        }\n      })}\n      <div>{loading && 'Loading...'}</div>\n      <div>{error && 'Error'}</div>\n    </>\n  )\n}","import { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport default function useBookSearch(query, pageNumber) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const [books, setBooks] = useState([])\n  const [hasMore, setHasMore] = useState(false)\n\n  useEffect(() => {\n    setBooks([])\n  }, [query])\n\n  useEffect(() => {\n    setLoading(true)\n    setError(false)\n    let cancel\n    axios({\n      method: 'GET',\n      url: 'http://openlibrary.org/search.json',\n      params: { q: query, page: pageNumber },\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setBooks(prevBooks => {\n        return [...new Set([...prevBooks, ...res.data.docs.map(b => b.title)])]\n      })\n      setHasMore(res.data.docs.length > 0)\n      setLoading(false)\n    }).catch(e => {\n      if (axios.isCancel(e)) return\n      setError(true)\n    })\n    return () => cancel()\n  }, [query, pageNumber])\n\n  return { loading, error, books, hasMore }\n}"],"names":["InfiniteScroll","useState","query","setQuery","pageNumber","setPageNumber","loading","setLoading","error","setError","books","setBooks","hasMore","setHasMore","useEffect","cancel","axios","method","url","params","q","page","cancelToken","c","then","res","prevBooks","Set","data","docs","map","b","title","length","catch","e","useBookSearch","observer","useRef","lastBookElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","type","value","onChange","target","book","index","ref"],"sourceRoot":""}